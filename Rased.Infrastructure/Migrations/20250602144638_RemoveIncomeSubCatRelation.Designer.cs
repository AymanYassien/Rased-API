// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rased.Infrastructure.Data;

#nullable disable

namespace Rased.Infrastructure.Migrations
{
    [DbContext(typeof(RasedDbContext))]
    [Migration("20250602144638_RemoveIncomeSubCatRelation")]
    partial class RemoveIncomeSubCatRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<int?>("BillDraftId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("AttachmentId");

                    b.HasIndex("BillDraftId")
                        .HasDatabaseName("IX_Attachment_BillDraftId");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("IX_Attachment_ExpenseId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Rased.Infrastructure.AutomationRule", b =>
                {
                    b.Property<int>("AutomationRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutomationRuleId"));

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TriggerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("AutomationRuleId");

                    b.HasIndex("TriggerTypeId");

                    b.ToTable("AutomationRules");
                });

            modelBuilder.Entity("Rased.Infrastructure.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetId"));

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("BudgetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool>("RolloverUnspent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<decimal>("SpentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("BudgetId");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("Budgets", t =>
                        {
                            t.HasCheckConstraint("CK_Budget_DateRange_Valid", "[EndDate] > [StartDate]");

                            t.HasCheckConstraint("CK_Budget_SpentAmount_NonNegative", "[SpentAmount] >= 0");

                            t.HasCheckConstraint("CK_Budget_WalletAssignment", "([WalletId] IS NULL AND [SharedWalletId] IS NOT NULL) OR ([WalletId] IS NOT NULL AND [SharedWalletId] IS NULL)");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Rased.Infrastructure.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAutomated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedBudgetId")
                        .HasColumnType("int");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RelatedBudgetId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("Expenses", t =>
                        {
                            t.HasCheckConstraint("CK_Expense_Amount_GreaterThanZero", "Amount > 0");

                            t.HasCheckConstraint("CK_Expense_WalletOrSharedWallet", "(WalletId IS NULL AND SharedWalletId IS NOT NULL) OR (WalletId IS NOT NULL AND SharedWalletId IS NULL)");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.ExpenseTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("AutomationRuleId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsNeedApprovalWhenAutoAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TemplateId");

                    b.HasIndex("AutomationRuleId")
                        .IsUnique()
                        .HasDatabaseName("IX_ExpenseTemplate_AutomationRuleId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ExpenseTemplate_Name");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("ExpenseTemplates", t =>
                        {
                            t.HasCheckConstraint("CK_ExpenseTemplate_Amount_Positive", "[Amount] >= 0");

                            t.HasCheckConstraint("CK_Expense_WalletOrSharedWallet", "(WalletId IS NULL AND SharedWalletId IS NOT NULL) OR (WalletId IS NOT NULL AND SharedWalletId IS NULL)")
                                .HasName("CK_Expense_WalletOrSharedWallet1");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.ExpenseTransactionRecord", b =>
                {
                    b.Property<int>("ExpenseTrasactionRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseTrasactionRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseSpecificData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("ExpenseTrasactionRecordId");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("IX_ExpenseTransactionRecord_ExpenseId");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_ExpenseTransactionRecord_TransactionId");

                    b.HasIndex("TransactionId", "ExpenseId")
                        .IsUnique()
                        .HasDatabaseName("IX_ExpenseTransactionRecord_TransactionId_ExpenseId");

                    b.ToTable("ExpenseTransactionRecords");
                });

            modelBuilder.Entity("Rased.Infrastructure.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Helpers.Constants.CustomRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Income", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IncomeSourceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAutomated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("IncomeId");

                    b.HasIndex("IncomeSourceTypeId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("Incomes", t =>
                        {
                            t.HasCheckConstraint("CK_Income_WalletOrSharedWallet", "((WalletId IS NULL AND SharedWalletId IS NOT NULL) OR (WalletId IS NOT NULL AND SharedWalletId IS NULL))");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.IncomeTemplate", b =>
                {
                    b.Property<int>("IncomeTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncomeTemplateId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("AutomationRuleId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IncomeSourceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNeedApprovalWhenAutoAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("IncomeTemplateId");

                    b.HasIndex("AutomationRuleId")
                        .IsUnique();

                    b.HasIndex("IncomeSourceTypeId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("WalletId");

                    b.ToTable("IncomeTemplates", t =>
                        {
                            t.HasCheckConstraint("CK_IncomeTemplate_WalletOrSharedWallet", "((WalletId IS NULL AND SharedWalletId IS NOT NULL) OR (WalletId IS NOT NULL AND SharedWalletId IS NULL))");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Bills.BillDraft", b =>
                {
                    b.Property<int>("BillDraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillDraftId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("BillDraftId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("BillDrafts", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Debts.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME2");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("DECIMAL(12, 9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("DECIMAL(12, 9)");

                    b.Property<int>("PaidInstallments")
                        .HasColumnType("INT");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Status")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("DECIMAL(12, 9)");

                    b.Property<int>("TotalInstallments")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Debts.LoanInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("DECIMAL(12, 9)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanInstallments", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Extras.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Extras.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("MessageAr")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("MessageEn")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Goals.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<decimal>("CurrentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DesiredDate")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Frequency")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<decimal?>("FrequencyAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<decimal>("StartedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int?>("SubCatId")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCatId");

                    b.HasIndex("WalletId");

                    b.ToTable("Goals", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Goals.GoalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<decimal>("InsertedAmount")
                        .HasColumnType("DECIMAL(12, 9)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("GoalTransactions", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Preferences.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<bool>("EnableAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableEmails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("UserPrefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserPrefId")
                        .IsUnique();

                    b.ToTable("NotificationSettings", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Preferences.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("MoneyFormat")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Savings.Saving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsSaving")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int?>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCatId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("DECIMAL(9, 6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("SubCatId");

                    b.HasIndex("WalletId");

                    b.ToTable("Savings", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SWInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(50)")
                        .HasDefaultValue("معلق");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SharedWalletId");

                    b.ToTable("SWInvitations", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SharedWallet", b =>
                {
                    b.Property<int>("SharedWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedWalletId"));

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ExpenseLimit")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StaticWalletStatusDataId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("WalletStatusId")
                        .HasColumnType("int");

                    b.HasKey("SharedWalletId");

                    b.HasIndex("ColorTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StaticWalletStatusDataId");

                    b.HasIndex("WalletStatusId");

                    b.ToTable("SharedWallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SharedWalletMembers", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int>("SharedWalletId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MembershipId");

                    b.HasIndex("SharedWalletId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedWalletMembers");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("INT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(9, 6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.PlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Type")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDetails", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Status")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Transfer.TransactionRejection", b =>
                {
                    b.Property<int>("RejectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectionId"));

                    b.Property<DateTime>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("RejectionId");

                    b.HasIndex("RejectedById")
                        .HasDatabaseName("IX_TransactionRejection_RejectedById");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_TransactionRejection_TransactionId");

                    b.HasIndex("TransactionId", "RejectedById")
                        .IsUnique()
                        .HasDatabaseName("IX_TransactionRejection_TransactionId_RejectedById");

                    b.ToTable("TransactionRejection");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.User.RasedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(50)")
                        .HasDefaultValue("غير نشط");

                    b.Property<string>("Address")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("BanBrokeAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("BannedDuration")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("BannedReason")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTime?>("OtpExpiryTime")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("IMAGE");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("UserBadge")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(255)")
                        .HasDefaultValue("جديد");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Rased.Infrastructure.PersonalIncomeTrasactionRecord", b =>
                {
                    b.Property<int>("PersonalIncomeTrasactionRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalIncomeTrasactionRecordId"));

                    b.Property<int>("ApprovalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IncomeId")
                        .HasColumnType("int");

                    b.Property<string>("IncomeSpecificData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("PersonalIncomeTrasactionRecordId");

                    b.HasIndex("ApprovalId")
                        .HasDatabaseName("IX_PersonalIncomeTransactionRecord_ApprovalId");

                    b.HasIndex("IncomeId")
                        .HasDatabaseName("IX_PersonalIncomeTransactionRecord_IncomeId");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_PersonalIncomeTransactionRecord_TransactionId");

                    b.HasIndex("TransactionId", "IncomeId", "ApprovalId")
                        .IsUnique()
                        .HasDatabaseName("IX_PersonalIncomeTransactionRecord_TransactionId_IncomeId_ApprovalId");

                    b.ToTable("PersonalIncomeTrasactionRecords");
                });

            modelBuilder.Entity("Rased.Infrastructure.SharedWalletIncomeTransaction", b =>
                {
                    b.Property<int>("SharedWalletIncomeTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedWalletIncomeTransactionId"));

                    b.Property<int>("ApprovalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IncomeId")
                        .HasColumnType("int");

                    b.Property<string>("IncomeSpecificData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("SharedWalletIncomeTransactionId");

                    b.HasIndex("ApprovalId")
                        .HasDatabaseName("IX_SharedWalletIncomeTransaction_ApprovalId");

                    b.HasIndex("IncomeId")
                        .HasDatabaseName("IX_SharedWalletIncomeTransaction_IncomeId");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_SharedWalletIncomeTransaction_TransactionId");

                    b.HasIndex("TransactionId", "IncomeId", "ApprovalId")
                        .IsUnique()
                        .HasDatabaseName("IX_SharedWalletIncomeTransaction_TransactionId_IncomeId_ApprovalId");

                    b.ToTable("SharedWalletIncomeTransactions");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticBudgetTypesData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticBudgetTypes");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticColorTypeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticColorTypes");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticDaysOfWeekNamesData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticDaysOfWeekNames");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticIncomeSourceTypeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticIncomeSourceTypes");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticPaymentMethodsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticPaymentMethods");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticReceiverTypeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticReceiverTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Friend"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SharedWallet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UnknownPerson"
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticThresholdTypeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StaticThresholdTypes");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticTransactionStatusData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticTransactionStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticTriggerTypeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("StaticTriggerTypes");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticWalletStatusData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StaticWalletStatus");
                });

            modelBuilder.Entity("Rased.Infrastructure.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Rased.Infrastructure.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReceiverTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverWalletId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SenderWalletId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("IX_Transaction_ReceiverId");

                    b.HasIndex("ReceiverTypeId");

                    b.HasIndex("ReceiverWalletId")
                        .HasDatabaseName("IX_Transaction_ReceiverWalletId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("IX_Transaction_SenderId");

                    b.HasIndex("SenderWalletId")
                        .HasDatabaseName("IX_Transaction_SenderWalletId");

                    b.HasIndex("TransactionStatusId")
                        .HasDatabaseName("IX_Transaction_Status");

                    b.ToTable("Transactions", t =>
                        {
                            t.HasCheckConstraint("CK_Transaction_Amount", "[Amount] > 0");
                        });
                });

            modelBuilder.Entity("Rased.Infrastructure.TransactionApproval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalId"));

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("ApprovalId");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("IX_TransactionApproval_ApproverId");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_TransactionApproval_TransactionId");

                    b.HasIndex("TransactionId", "ApproverId")
                        .IsUnique()
                        .HasDatabaseName("IX_TransactionApproval_TransactionId_ApproverId");

                    b.ToTable("TransactionApprovals");
                });

            modelBuilder.Entity("Rased.Infrastructure.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<int>("ColorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ExpenseLimit")
                        .HasColumnType("decimal(11,2)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("InitialBalance")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalBalance")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<int>("WalletStatusId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("ColorTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("WalletStatusId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.WalletStatistics", b =>
                {
                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalLoans")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalSavings")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalletId");

                    b.ToTable("WalletStatistics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Rased.Infrastructure.Helpers.Constants.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Rased.Infrastructure.Helpers.Constants.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rased.Infrastructure.Attachment", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Bills.BillDraft", "BillDraft")
                        .WithMany("Attachments")
                        .HasForeignKey("BillDraftId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rased.Infrastructure.Expense", "Expense")
                        .WithMany("Attachments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BillDraft");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Rased.Infrastructure.AutomationRule", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticTriggerTypeData", "StaticTriggerTypeData")
                        .WithMany()
                        .HasForeignKey("TriggerTypeId");

                    b.Navigation("StaticTriggerTypeData");
                });

            modelBuilder.Entity("Rased.Infrastructure.Budget", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticBudgetTypesData", "StaticBudgetTypesData")
                        .WithMany()
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Budgets")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("Budgets")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Budgets")
                        .HasForeignKey("WalletId");

                    b.Navigation("SharedWallet");

                    b.Navigation("StaticBudgetTypesData");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Expense", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticPaymentMethodsData", "StaticPaymentMethodsData")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Budget", "RelatedBudget")
                        .WithMany()
                        .HasForeignKey("RelatedBudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Expenses")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Expenses")
                        .HasForeignKey("WalletId");

                    b.Navigation("RelatedBudget");

                    b.Navigation("SharedWallet");

                    b.Navigation("StaticPaymentMethodsData");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.ExpenseTemplate", b =>
                {
                    b.HasOne("Rased.Infrastructure.AutomationRule", "AutomationRule")
                        .WithOne("ExpenseTemplate")
                        .HasForeignKey("Rased.Infrastructure.ExpenseTemplate", "AutomationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.StaticPaymentMethodsData", "StaticPaymentMethodsData")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("ExpensesTemplates")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("ExpenseTemplates")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("ExpensesTemplate")
                        .HasForeignKey("WalletId");

                    b.Navigation("AutomationRule");

                    b.Navigation("SharedWallet");

                    b.Navigation("StaticPaymentMethodsData");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.ExpenseTransactionRecord", b =>
                {
                    b.HasOne("Rased.Infrastructure.Expense", "Expense")
                        .WithMany()
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Rased.Infrastructure.Friendship", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Receiver")
                        .WithMany("FriendReceivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Sender")
                        .WithMany("FriendSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Rased.Infrastructure.Income", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticIncomeSourceTypeData", "IncomeSourceType")
                        .WithMany()
                        .HasForeignKey("IncomeSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Incomes")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Incomes")
                        .HasForeignKey("WalletId");

                    b.Navigation("IncomeSourceType");

                    b.Navigation("SharedWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.IncomeTemplate", b =>
                {
                    b.HasOne("Rased.Infrastructure.AutomationRule", "AutomationRule")
                        .WithOne("IncomeTemplate")
                        .HasForeignKey("Rased.Infrastructure.IncomeTemplate", "AutomationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.StaticIncomeSourceTypeData", "IncomeSourceType")
                        .WithMany()
                        .HasForeignKey("IncomeSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("IncomeTemplates")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("IncomeTemplates")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("IncomeTemplates")
                        .HasForeignKey("WalletId");

                    b.Navigation("AutomationRule");

                    b.Navigation("IncomeSourceType");

                    b.Navigation("SharedWallet");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Bills.BillDraft", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("BillDrafts")
                        .HasForeignKey("SharedWalletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("BillDrafts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SharedWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Debts.Loan", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Loans")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Loans")
                        .HasForeignKey("WalletId");

                    b.Navigation("SharedWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Debts.LoanInstallment", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Debts.Loan", "Loan")
                        .WithMany("LoanInstallments")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Extras.Notification", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Goals.Goal", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Goals")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("Goals")
                        .HasForeignKey("SubCatId");

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Goals")
                        .HasForeignKey("WalletId");

                    b.Navigation("SharedWallet");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Goals.GoalTransaction", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Goals.Goal", "Goal")
                        .WithMany("GoalTransactions")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Preferences.NotificationSetting", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Preferences.UserPreference", "Preference")
                        .WithOne("NotificationSetting")
                        .HasForeignKey("Rased.Infrastructure.Models.Preferences.NotificationSetting", "UserPrefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Preferences.UserPreference", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "User")
                        .WithOne("Preference")
                        .HasForeignKey("Rased.Infrastructure.Models.Preferences.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Savings.Saving", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("Savings")
                        .HasForeignKey("SharedWalletId");

                    b.HasOne("Rased.Infrastructure.SubCategory", "SubCategory")
                        .WithMany("Savings")
                        .HasForeignKey("SubCatId");

                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithMany("Savings")
                        .HasForeignKey("WalletId");

                    b.Navigation("SharedWallet");

                    b.Navigation("SubCategory");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SWInvitation", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Receiver")
                        .WithMany("Receivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("SWInvitations")
                        .HasForeignKey("SharedWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SharedWallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SharedWallet", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticColorTypeData", "StaticColorTypeData")
                        .WithMany("SharedWallets")
                        .HasForeignKey("ColorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.Extras.Currency", "Currency")
                        .WithMany("SharedWallets")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.StaticWalletStatusData", null)
                        .WithMany("SharedWallets")
                        .HasForeignKey("StaticWalletStatusDataId");

                    b.HasOne("Rased.Infrastructure.StaticWalletStatusData", "StaticWalletStatusData")
                        .WithMany()
                        .HasForeignKey("WalletStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("StaticColorTypeData");

                    b.Navigation("StaticWalletStatusData");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SharedWalletMembers", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SharedWallet")
                        .WithMany("SWMembers")
                        .HasForeignKey("SharedWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Member")
                        .WithMany("SWMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SharedWallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.PlanDetail", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Subscriptions.Plan", "Plan")
                        .WithMany("PlanDetails")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.Subscription", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.Subscriptions.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Transfer.TransactionRejection", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RejectedBy");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Rased.Infrastructure.PersonalIncomeTrasactionRecord", b =>
                {
                    b.HasOne("Rased.Infrastructure.TransactionApproval", "TransactionApproval")
                        .WithMany()
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Income", "Income")
                        .WithMany()
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Income");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionApproval");
                });

            modelBuilder.Entity("Rased.Infrastructure.SharedWalletIncomeTransaction", b =>
                {
                    b.HasOne("Rased.Infrastructure.TransactionApproval", "TransactionApproval")
                        .WithMany()
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Income", "Income")
                        .WithMany()
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Income");

                    b.Navigation("Transaction");

                    b.Navigation("TransactionApproval");
                });

            modelBuilder.Entity("Rased.Infrastructure.SubCategory", b =>
                {
                    b.HasOne("Rased.Infrastructure.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Rased.Infrastructure.Transaction", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rased.Infrastructure.StaticReceiverTypeData", "StaticReceiverTypeData")
                        .WithMany()
                        .HasForeignKey("ReceiverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "ReceiverWallet")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ReceiverWalletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.SharedWallets.SharedWallet", "SenderWallet")
                        .WithMany("SentTransactions")
                        .HasForeignKey("SenderWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.StaticTransactionStatusData", "StaticTransactionStatusData")
                        .WithMany()
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("ReceiverWallet");

                    b.Navigation("Sender");

                    b.Navigation("SenderWallet");

                    b.Navigation("StaticReceiverTypeData");

                    b.Navigation("StaticTransactionStatusData");
                });

            modelBuilder.Entity("Rased.Infrastructure.TransactionApproval", b =>
                {
                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Rased.Infrastructure.Wallet", b =>
                {
                    b.HasOne("Rased.Infrastructure.StaticColorTypeData", "StaticColorTypeData")
                        .WithMany("Wallets")
                        .HasForeignKey("ColorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.User.RasedUser", "Creator")
                        .WithMany("Wallets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.Models.Extras.Currency", "Currency")
                        .WithMany("Wallets")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rased.Infrastructure.StaticWalletStatusData", "StaticWalletStatusData")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Currency");

                    b.Navigation("StaticColorTypeData");

                    b.Navigation("StaticWalletStatusData");
                });

            modelBuilder.Entity("Rased.Infrastructure.WalletStatistics", b =>
                {
                    b.HasOne("Rased.Infrastructure.Wallet", "Wallet")
                        .WithOne("WalletStatistics")
                        .HasForeignKey("Rased.Infrastructure.WalletStatistics", "WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Rased.Infrastructure.AutomationRule", b =>
                {
                    b.Navigation("ExpenseTemplate")
                        .IsRequired();

                    b.Navigation("IncomeTemplate")
                        .IsRequired();
                });

            modelBuilder.Entity("Rased.Infrastructure.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Rased.Infrastructure.Expense", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Bills.BillDraft", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Debts.Loan", b =>
                {
                    b.Navigation("LoanInstallments");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Extras.Currency", b =>
                {
                    b.Navigation("SharedWallets");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Goals.Goal", b =>
                {
                    b.Navigation("GoalTransactions");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Preferences.UserPreference", b =>
                {
                    b.Navigation("NotificationSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.SharedWallets.SharedWallet", b =>
                {
                    b.Navigation("BillDrafts");

                    b.Navigation("Budgets");

                    b.Navigation("Expenses");

                    b.Navigation("ExpensesTemplates");

                    b.Navigation("Goals");

                    b.Navigation("IncomeTemplates");

                    b.Navigation("Incomes");

                    b.Navigation("Loans");

                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SWInvitations");

                    b.Navigation("SWMembers");

                    b.Navigation("Savings");

                    b.Navigation("SentTransactions");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.Subscriptions.Plan", b =>
                {
                    b.Navigation("PlanDetails");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Rased.Infrastructure.Models.User.RasedUser", b =>
                {
                    b.Navigation("FriendReceivers");

                    b.Navigation("FriendSenders");

                    b.Navigation("Notifications");

                    b.Navigation("Preference");

                    b.Navigation("Receivers");

                    b.Navigation("SWMembers");

                    b.Navigation("Senders");

                    b.Navigation("Subscriptions");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticColorTypeData", b =>
                {
                    b.Navigation("SharedWallets");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.StaticWalletStatusData", b =>
                {
                    b.Navigation("SharedWallets");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Rased.Infrastructure.SubCategory", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("ExpenseTemplates");

                    b.Navigation("Expenses");

                    b.Navigation("Goals");

                    b.Navigation("IncomeTemplates");

                    b.Navigation("Savings");
                });

            modelBuilder.Entity("Rased.Infrastructure.Wallet", b =>
                {
                    b.Navigation("BillDrafts");

                    b.Navigation("Budgets");

                    b.Navigation("Expenses");

                    b.Navigation("ExpensesTemplate");

                    b.Navigation("Goals");

                    b.Navigation("IncomeTemplates");

                    b.Navigation("Incomes");

                    b.Navigation("Loans");

                    b.Navigation("Savings");

                    b.Navigation("WalletStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
